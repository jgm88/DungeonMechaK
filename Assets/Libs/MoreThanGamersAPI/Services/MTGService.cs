//------------------------------------------------------------------------------
// <auto-generated>
//     Este código fue generado por una herramienta.
//     Versión de runtime:4.0.30319.18444
//
//     Los cambios en este archivo podrían causar un comportamiento incorrecto y se perderán si
//     se vuelve a generar el código.
// </auto-generated>
//------------------------------------------------------------------------------
using System;
using UnityEngine;
using System.Collections;

namespace MoreThanGamers
{
		
	public abstract class MTGService
	{
		/** Enum */
		public  enum ServiceCode{
			NO_VALID_ERROR, 
			CORRECT,
			GAME_ERROR,
			SOCKET_ERROR,
			LOGIN_ERROR,
			PLAYER_ERROR,
			CHALLENGE_ERROR,
			CHALLENGE_NOT_VALID,
			SECURITY_ERROR,
			METRIC_ERROR,
			EMAIL_ERROR ,
			EXTERNAL_RESOURCE_ERROR,
			SECURITY_GAME_SESSION_ERROR,
			NO_PLAYER_LOGED ,
			ANONYMUS_DISABLED
			
		}
		/** Vars **/
		protected static int EXTERNAL_ERROR = -1;
		protected static int CORRECT_STATUS = 1;
		private const string url = "http://morethangamers.com/morethanplataform/index.php/restapi/developer/";
		private string functionName;
		private bool errorFlag = false;
		private string errorMessage = "";
		private int statusIndex = 0;
		private bool callFinish = false;
		private bool deprecateAfterMaxCalls = false;
		//Listeners. Called in the ServiceManager
		public delegate void ServiceListener(MTGService s);
		public ServiceListener endCorrectListener;
		public ServiceListener errorListener;
		/*******************************************/
		//trying several times to call CONFIG
		public int calls_error = 0;
		public int max_error_calls = 3;
		/**
		 * Singleton
		 */ 
		protected MTGApi api;
		
		public MTGService(MTGApi api,string functionName)
		{
			this.api = api;	
			this.functionName = functionName;
			
		}
		/************************************************/
		public IEnumerator exectureService()
		{
			callFinish = true;

			yield return api.StartCoroutine(callService());
			callFinish = false;
		}
		/**
		 * Implemented different in each class
		 **/
		protected  virtual IEnumerator callService()
		{
			Debug.Log("IMPLEMENT IT");
			yield return 0;
		}

		/**
		 * Gets Functions
		 **/
		public int getStatus { get {
			return statusIndex;
		}}
		
		public bool isError { get {
			return errorFlag;
		}}
		public bool DeprecateAfterMaxCalls {
			get { return deprecateAfterMaxCalls; }
			set { deprecateAfterMaxCalls = value; }
		}
		public string getErrorMessage { get {
			return errorMessage;
		}}
		public string connectionUrl { get
		{ 
			return url+functionName;
		}}
		public bool isCallFinished { get {
			return callFinish;
		}}
		public bool maximCallTries { get {
			return calls_error >= max_error_calls;
		}}
		/**
		 * Error Managment
		 **/ 
		
		protected void setCorrect()
		{
			errorFlag = false;
			errorMessage = "";
			statusIndex = MTGService.CORRECT_STATUS;
		}

		protected void setError(int status, string message)
		{
			errorFlag = true;
			statusIndex = status;
			errorMessage = message;
			api.debugLogMessage(this.ToString()+" "+statusIndex+": "+errorMessage);
		}
		protected virtual bool  checkstatus(JSONObject json)
		{
			JSONObject stateObj = json.GetField("state");
			//JSON error
			if(stateObj.IsNull || !stateObj.IsNumber)
			{
				setError(MTGService.EXTERNAL_ERROR,"Json Error Format "+stateObj.str);
				return false;
			}
			//Coorrect
			if(stateObj.n == MTGService.CORRECT_STATUS)
			{
				this.setCorrect();
				return true;
			}
			// Api Error
			this.setError((int)stateObj.n ,json.GetField("error").str);
			return false;
			
		}
		public void finishCall()
		{
			api.removeCall(this);
		}
		public static String HastableToUrlGetParametter(Hashtable table)
		{
			string urlParams = "?";
			foreach (DictionaryEntry d in table) 
			{
				urlParams +=d.Key.ToString()+"="+d.Value.ToString()+"&";
			}
			return urlParams;
		}

	}
}


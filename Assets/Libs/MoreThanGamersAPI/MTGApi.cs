//------------------------------------------------------------------------------
// <auto-generated>
//     Este código fue generado por una herramienta.
//     Versión de runtime:4.0.30319.18444
//
//     Los cambios en este archivo podrían causar un comportamiento incorrecto y se perderán si
//     se vuelve a generar el código.
// </auto-generated>
//------------------------------------------------------------------------------
using System;
using UnityEngine;
using System.Collections;

namespace MoreThanGamers
{
	public class MTGApi : MonoBehaviour
	{

		private static string GAME_SESSION_PREFS = "_MTG_GAME_SESSION_";

		private string session_code;
		private ServiceManager serviceManager;
		//Sets on Editor
		public int game_id;
		public string secret_code;
		public enum Compilation   { Web,Mobile };
		public Compilation compilationType;
		public bool enable_debug = false;
		public GUIText guiTextDebug;
		public MTGSocket[] sockets;

		private MTGPlayer playerLoged = null;
		private ConectionErrorMessage errorDisplay;
		/**
		 * Constructor
		 */
		private void Awake()
		{
			//Only one in scene
			MTGApi[] items = GameObject.FindObjectsOfType<MTGApi>();
			foreach (MTGApi it in items) 
			{
				if(it.gameObject != this.gameObject)
					Destroy(it.gameObject);
			}
			//Make that one invencibles
			DontDestroyOnLoad(this.gameObject);

			serviceManager = new ServiceManager(this);
			serviceManager.maxCallsError += maxCallErrors;

			if(PlayerPrefs.GetString(GAME_SESSION_PREFS) == "")
			{

				generateNewGameSession();
			}

			errorDisplay = this.gameObject.AddComponent<ConectionErrorMessage>();
			errorDisplay.enabled = false;
			if(guiTextDebug != null)
				DontDestroyOnLoad(guiTextDebug);
		}
		private void maxCallErrors()
		{
			errorDisplay.enabled = true;
		}
		public void sendService(MTGService s)
		{
			serviceManager.addFunction(s);
		}
		public GameSessionService generateNewGameSession()
		{

			GameSessionService s = new GameSessionService(this);
			playerLoged = null;
			s.endCorrectListener += setSessionCode;
			sendService(s);

			return s;
		}
		public MetricService generateMetricService(int metricId, int metricValue)
		{
			MetricService s = new MetricService(this,metricId,metricValue);
			sendService(s);
			return s;
		}

		public PlayerLoginService generatePlayerLoginService()
		{
			PlayerLoginService s = new PlayerLoginService(this);
			sendService(s);
			s.endCorrectListener += setPlayerLogged;
			return s;
		}
		private void setPlayerLogged(MTGService s)
		{
			this.playerLoged = (s as PlayerLoginService).player;
		}
		private void setSessionCode(MTGService s)
		{
			GameSessionService sessionService = (GameSessionService) s;
			PlayerPrefs.SetString(GAME_SESSION_PREFS,sessionService.sessionCode);

		}

		/**
		 * Returns Session Code, if is not setted will return NULL, in that case ask for new session
		 * code to the services
		 */
		public string getSessionCode()
		{
			return PlayerPrefs.GetString(GAME_SESSION_PREFS);
		}
		/**
		 * Returns secret code of the API 
		 */
		public string getSecretCode()
		{
			return secret_code;
		}

		public int GameId { get
		{
				return game_id;
		}}

		public MTGSocket getSocketAt(int index)
		{
			return sockets[index];
		}
		public bool isPlayerLoged()
		{
			return playerLoged != null;
		}
		public MTGPlayer getPlayerLoged()
		{
			return playerLoged;
		}
		public MTGSocket getSocketWithID(int id)
		{
			foreach (MTGSocket s in sockets) 
			{
				if(s.socketId == id)
					return s;
			}
			return null;
		}	
		public void openLoginWindow()
		{
			
			string urlweb="http://www.morethangamers.com/morethanplataform/index.php/game/permission/"+getSessionCode();

			if(compilationType == Compilation.Web)
				Application.ExternalEval("window.open('" + urlweb + "','_blank')");
			else if(compilationType == Compilation.Mobile)
				Application.OpenURL(urlweb);
		}

		public void  restartServices()
		{
			serviceManager.activateManager();
		}
		public void removeCall(MTGService s)
		{
			serviceManager.removeFunction(s);
		}
			/*public MTGSocket createNewSocket(int socketId, string password)
		{
			return new MTGSocket(this,socketId,password);
		}*/

		public void debugLogMessage(String s)
		{
			if(enable_debug)
				Debug.Log(s);
			if(guiTextDebug != null)
				guiTextDebug.text += s+"\n";
		}

	}
}

